options
{
  DEBUG_PARSER = false;
  STATIC	   = false;
}

PARSER_BEGIN(MvcParser)

package task4.parser;
import java.util.*;
import java.io.*;
import task4.command.Command;
import task4.command.Define;
import task4.command.ExportToGnuplot;
import task4.command.PrintXML;
import task4.node.NodeComponent;
import task4.node.NodeSocket;
import task4.node.NodeSubcomponentMount;
import task4.node.NodeTriple;
import task4.Tree;

public class MvcParser{
   /** the fully qualified output filename of the Gnuplot file */
   private String _outputFilenameFull;

   // ---------------------------------------------------------------------------------------------------------------------------------------------------------
   /**
	* Creates a parser.  Call <tt>parse()</tt> to execute it.
	*
	* @param inputFilenameFull - the fully qualified input filename of the tank source file
	* @param outputFilenameFull - the fully qualified output filename of the Gnuplot file
	*
	* @throws IOException if there is any file error
	*/
   public MvcParser(final String inputFilenameFull, final String outputFilenameFull) throws IOException{
	  this(new BufferedReader(new FileReader(inputFilenameFull)));

	  assert (outputFilenameFull != null);

	  _outputFilenameFull = outputFilenameFull;
   }
}

PARSER_END(MvcParser)

//-------------------------------------------------------------------------------------------------------------------------------------------------------------
<DEFAULT> SKIP : {
" "
| "\f"
| "\n"
| "\r"
| "\t"
}


//-------------------------------------------------------------------------------------------------------------------------------------------------------------
<DEFAULT> MORE : {
"//" : IN_SINGLE_LINE_COMMENT
| "/*" : IN_MULTI_LINE_COMMENT
}


<IN_SINGLE_LINE_COMMENT>
SPECIAL_TOKEN : {
<SINGLE_LINE_COMMENT: "\n" | "\r" | "\r\n"> : DEFAULT
}


<IN_MULTI_LINE_COMMENT>
SPECIAL_TOKEN : {
<MULTI_LINE_COMMENT: "*/"> : DEFAULT
}


<IN_SINGLE_LINE_COMMENT,IN_MULTI_LINE_COMMENT> MORE : {
<~[]>
}


//-------------------------------------------------------------------------------------------------------------------------------------------------------------
<DEFAULT> TOKEN : {
<AT: "at">
| <COLOR: "color">
| <CONNECTS_TO: "connectsTo">
| <DEFINE: "define">
| <EXPORT_TO_GNUPLOT: "exportToGnuplot">
| <ID: "id">
| <NEW: "new">
| <PRINT_XML: "printXML">
| <SOCKET: "socket">
| <VOLUME: "volume">
}


//-------------------------------------------------------------------------------------------------------------------------------------------------------------
<DEFAULT> TOKEN : {
<ASSIGN: "=">
}


//-------------------------------------------------------------------------------------------------------------------------------------------------------------
<DEFAULT> TOKEN : {
<COLON: ":">
| <COMMA: ",">
| <LBRACE: "{">
| <RBRACE: "}">
| <LBRACKET: "[">
| <RBRACKET: "]">
| <LPAREN: "(">
| <RPAREN: ")">
| <SEMICOLON: ";">
| <SQUOTE: "\'">
| <DQUOTE: "\"">
}


//-------------------------------------------------------------------------------------------------------------------------------------------------------------
<DEFAULT> TOKEN : {
<#PATTERN_DECIMAL: ["0"-"9"]>
| <LITERAL_NUMBER: <LITERAL_INTEGER> | <LITERAL_REAL>>
| <LITERAL_INTEGER: ("+" | "-")? (<PATTERN_DECIMAL>)+>
| <LITERAL_REAL: ("+" | "-")? (<PATTERN_DECIMAL>)+ "." (<PATTERN_DECIMAL>)+>
| <LITERAL_STRING: "\"" (~["\""])* "\"">
}


//-------------------------------------------------------------------------------------------------------------------------------------------------------------
<DEFAULT> TOKEN : {
<IDENTIFIER: <LETTER> (<LETTER> | <DIGIT>)*>
| <#LETTER: ["a"-"z","A"-"Z","_"]>
| <#DIGIT: ["0"-"9"]>
}


public void parse() :
{
   Command command;
}
{
  (
	 command = Command()
	 {
		command.execute();
	 }
  )*
  <EOF>
}

private Command Command() :
{
	Command arguments;
}
{
	(
		arguments = Define()
		|
		arguments = ExportToGnuplot()
		|
		arguments = PrintXML()
	)
	<SEMICOLON>
	{
		return arguments;
	}
}

private Define Define() :
{
	NodeComponent args;
	String variable;
}
{
	<DEFINE>
	variable = Variable()
	<ASSIGN>
	args = ComponentDefinition()
	{
		return new Define(variable, args);
	}
}

private ExportToGnuplot ExportToGnuplot() :
{
	String variable;
	NodeTriple triple;
}
{
	<EXPORT_TO_GNUPLOT>
	<LPAREN>
	variable = Variable()
	<COMMA>
	triple = Triple()
	<RPAREN>
	{
		return new ExportToGnuplot(variable, triple);
	}
}

private PrintXML PrintXML() :
{
	String variable;
}
{
	<PRINT_XML>
	<LPAREN>
	variable = Variable()
	<RPAREN>
	{
		return new PrintXML(variable);
	}
}

private List<NodeSubcomponentMount> Connections() :
{
	List<NodeSubcomponentMount> connections = new ArrayList<NodeSubcomponentMount>();
	NodeSubcomponentMount connection;
	NodeComponent nodeComponent;
	NodeTriple triple;
}
{
	<CONNECTS_TO>
	<LPAREN>
	(
		nodeComponent = ComponentDefinition()
		<AT>
		triple = Triple()
		{
			connection = new NodeSubcomponentMount(nodeComponent, triple);
			connections.add(connection);
		}
	)+
	<RPAREN>
	{
		return connections;
	}
}

private NodeComponent ComponentDefinition() :
{
	String identifier;
	NodeTriple size;
	NodeSocket socket;
	List<NodeSubcomponentMount> connections = null;
}
{
	<LPAREN>
	identifier = Identifier()
	size = Volume()
	socket = Socket()
	[
		connections = Connections()
	]
	<RPAREN>
	{
		return new NodeComponent(identifier, size, socket, connections);
	}
}

private String Identifier() :
{
	String identifier;
}
{
	identifier = <ID>.image
	<ASSIGN>
	<LITERAL_STRING>
	{
		return identifier;
	}
}

private NodeSocket Socket() :
{
	NodeTriple triple;
}
{
	<SOCKET>
	<ASSIGN>
	triple = Triple()
	{
		return new NodeSocket(triple);
	}
}

private NodeTriple Triple() :
{
	String x;
	String y;
	String z;
}
{
	<LBRACKET>
	x = <LITERAL_NUMBER>.image
	<COMMA>
	y = <LITERAL_NUMBER>.image
	<COMMA>
	z = <LITERAL_NUMBER>.image
	<RBRACKET>
	{
		return new NodeTriple(x, y, z);
	}
}

private String Variable() :
{
   String variable;
}
{
   <IDENTIFIER>
   {
	  variable = token.image;
	  return variable;
   }
}

private NodeTriple Volume() :
{
	NodeTriple triple;
}
{
	<VOLUME>
	<ASSIGN>
	triple = Triple()
	{
		return triple;
	}
}