/* Generated By:JavaCC: Do not edit this line. MvcParser.java */
package task4.parser;
import java.util.*;
import java.io.*;
import task4.node.NodeComponent;
import task4.node.NodeSocket;
import task4.node.NodeSubcomponentMount;
import task4.node.NodeTriple;
import task4.ParserManager;

public class MvcParser implements MvcParserConstants {
   /** the fully qualified output filename of the Gnuplot file */
   private String _outputFilenameFull;

   // ---------------------------------------------------------------------------------------------------------------------------------------------------------
   /**
	* Creates a parser.  Call <tt>parse()</tt> to execute it.
	*
	* @param inputFilenameFull - the fully qualified input filename of the tank source file
	* @param outputFilenameFull - the fully qualified output filename of the Gnuplot file
	*
	* @throws IOException if there is any file error
	*/
   public MvcParser(final String inputFilenameFull, final String outputFilenameFull) throws IOException{
          this(new BufferedReader(new FileReader(inputFilenameFull)));

          assert (outputFilenameFull != null);

          _outputFilenameFull = outputFilenameFull;
   }

  final public void parse() throws ParseException {
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DEFINE:
      case EXPORT_TO_GNUPLOT:
      case PRINT_XML:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      Command();
    }
    jj_consume_token(0);
  }

  final private void Command() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DEFINE:
      Define();
      break;
    case EXPORT_TO_GNUPLOT:
      ExportToGnuplot();
      break;
    case PRINT_XML:
      PrintXML();
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(SEMICOLON);
  }

  final private void Define() throws ParseException {
        NodeComponent args;
        String variable;
    jj_consume_token(DEFINE);
    variable = Variable();
    jj_consume_token(ASSIGN);
    args = ComponentDefinition();
                ParserManager.defineVariable(variable, args);
  }

  final private void ExportToGnuplot() throws ParseException {
        String variable;
        NodeTriple triple;
    jj_consume_token(EXPORT_TO_GNUPLOT);
    jj_consume_token(LPAREN);
    variable = Variable();
    jj_consume_token(COMMA);
    triple = Triple();
    jj_consume_token(RPAREN);
                ParserManager.exportToGnuplot(variable, triple);
  }

  final private void PrintXML() throws ParseException {
        String variable;
    jj_consume_token(PRINT_XML);
    jj_consume_token(LPAREN);
    variable = Variable();
    jj_consume_token(RPAREN);
                ParserManager.printXML(variable);
  }

  final private List<NodeSubcomponentMount> Connections() throws ParseException {
        List<NodeSubcomponentMount> connections = new ArrayList<NodeSubcomponentMount>();
        NodeSubcomponentMount connection;
        NodeComponent nodeComponent;
        NodeTriple triple;
    jj_consume_token(CONNECTS_TO);
    jj_consume_token(LPAREN);
    label_2:
    while (true) {
      nodeComponent = ComponentDefinition();
      jj_consume_token(AT);
      triple = Triple();
                        connection = new NodeSubcomponentMount(nodeComponent, triple);
                        connections.add(connection);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_2;
      }
    }
    jj_consume_token(RPAREN);
                {if (true) return connections;}
    throw new Error("Missing return statement in function");
  }

  final private NodeComponent ComponentDefinition() throws ParseException {
        String identifier;
        NodeTriple size;
        NodeSocket socket;
        List<NodeSubcomponentMount> connections = null;
    jj_consume_token(LPAREN);
    identifier = Identifier();
    size = Volume();
    socket = Socket();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CONNECTS_TO:
      connections = Connections();
      break;
    default:
      jj_la1[3] = jj_gen;
      ;
    }
    jj_consume_token(RPAREN);
                {if (true) return new NodeComponent(identifier, size, socket, connections);}
    throw new Error("Missing return statement in function");
  }

  final private String Identifier() throws ParseException {
        String identifier;
    identifier = jj_consume_token(ID).image;
    jj_consume_token(ASSIGN);
    jj_consume_token(LITERAL_STRING);
                {if (true) return identifier;}
    throw new Error("Missing return statement in function");
  }

  final private NodeSocket Socket() throws ParseException {
        NodeTriple triple;
    jj_consume_token(SOCKET);
    jj_consume_token(ASSIGN);
    triple = Triple();
                {if (true) return new NodeSocket(triple);}
    throw new Error("Missing return statement in function");
  }

  final private NodeTriple Triple() throws ParseException {
        String x;
        String y;
        String z;
    jj_consume_token(LBRACKET);
    x = jj_consume_token(LITERAL_NUMBER).image;
    jj_consume_token(COMMA);
    y = jj_consume_token(LITERAL_NUMBER).image;
    jj_consume_token(COMMA);
    z = jj_consume_token(LITERAL_NUMBER).image;
    jj_consume_token(RBRACKET);
                {if (true) return new NodeTriple(x, y, z);}
    throw new Error("Missing return statement in function");
  }

  final private String Variable() throws ParseException {
   String variable;
    jj_consume_token(IDENTIFIER);
          variable = token.image;
          {if (true) return variable;}
    throw new Error("Missing return statement in function");
  }

  final private NodeTriple Volume() throws ParseException {
        NodeTriple triple;
    jj_consume_token(VOLUME);
    jj_consume_token(ASSIGN);
    triple = Triple();
                {if (true) return triple;}
    throw new Error("Missing return statement in function");
  }

  /** Generated Token Manager. */
  public MvcParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[4];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x4c000,0x4c000,0x10000000,0x2000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,};
   }

  /** Constructor with InputStream. */
  public MvcParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public MvcParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new MvcParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 4; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 4; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public MvcParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new MvcParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 4; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 4; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public MvcParser(MvcParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 4; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(MvcParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 4; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[41];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 4; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 41; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
